/** @jsxImportSource https://esm.sh/react@18.2.0 */
import React, { useState, useEffect } from "https://esm.sh/react@18.2.0";
import { createRoot } from "https://esm.sh/react-dom@18.2.0/client";

function WeatherDashboard() {
  const [location, setLocation] = useState('New York');
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchWeatherData = async (city) => {
    try {
      setLoading(true);
      // Use Open-Meteo Geocoding API to get coordinates
      const geoResponse = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(city)}&count=1&language=en&format=json`);
      const geoData = await geoResponse.json();

      if (!geoData.results || geoData.results.length === 0) {
        throw new Error('City not found');
      }

      const { latitude, longitude } = geoData.results[0];

      // Fetch weather data using coordinates
      const weatherResponse = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true&hourly=temperature_2m,relativehumidity_2m,windspeed_10m`);
      const data = await weatherResponse.json();

      setWeatherData({
        ...data.current_weather,
        city: geoData.results[0].name,
        country: geoData.results[0].country
      });
      setError(null);
    } catch (err) {
      setError(err.message);
      setWeatherData(null);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchWeatherData(location);
  }, [location]);

  const handleLocationChange = (e) => {
    setLocation(e.target.value);
  };

  return (
    <div className="weather-dashboard">
      <h1>üå¶Ô∏è Weather Dashboard</h1>
      <div className="search-container">
        <input 
          type="text" 
          value={location} 
          onChange={handleLocationChange}
          placeholder="Enter city name"
        />
        <button onClick={() => fetchWeatherData(location)}>Search</button>
      </div>

      {loading && <p>Loading weather data...</p>}
      
      {error && (
        <div className="error-message">
          <p>‚ùå {error}</p>
        </div>
      )}

      {weatherData && !loading && (
        <div className="weather-details">
          <h2>{weatherData.city}, {weatherData.country}</h2>
          <div className="weather-grid">
            <div className="weather-card">
              <h3>Temperature</h3>
              <p>{weatherData.temperature}¬∞C</p>
            </div>
            <div className="weather-card">
              <h3>Wind Speed</h3>
              <p>{weatherData.windspeed} km/h</p>
            </div>
            <div className="weather-card">
              <h3>Wind Direction</h3>
              <p>{weatherData.winddirection}¬∞</p>
            </div>
          </div>
        </div>
      )}
      <footer>
        <a 
          href={import.meta.url.replace("esm.town", "val.town")} 
          target="_top"
        >
          View Source
        </a>
      </footer>
    </div>
  );
}

function client() {
  createRoot(document.getElementById("root")).render(<WeatherDashboard />);
}

if (typeof document !== "undefined") { client(); }

export default async function server(request: Request): Promise<Response> {
  return new Response(`
    <html>
      <head>
        <title>Weather Dashboard</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>${css}</style>
      </head>
      <body>
        <div id="root"></div>
        <script src="https://esm.town/v/std/catch"></script>
        <script type="module" src="${import.meta.url}"></script>
      </body>
    </html>
  `, {
    headers: {
      "content-type": "text/html",
    },
  });
}

const css = `
body {
  font-family: 'Arial', sans-serif;
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f4f4f4;
}

.weather-dashboard {
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  padding: 20px;
}

h1 {
  text-align: center;
  color: #333;
}

.search-container {
  display: flex;
  margin-bottom: 20px;
}

input {
  flex-grow: 1;
  padding: 10px;
  font-size: 16px;
  border: 1px solid #ddd;
  border-radius: 4px 0 0 4px;
}

button {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 0 4px 4px 0;
  cursor: pointer;
}

.weather-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 15px;
}

.weather-card {
  background-color: #f9f9f9;
  border-radius: 8px;
  padding: 15px;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.error-message {
  color: red;
  text-align: center;
}

footer {
  margin-top: 20px;
  text-align: center;
  font-size: 0.8em;
}

@media (max-width: 600px) {
  .weather-grid {
    grid-template-columns: 1fr;
  }
}
`;
